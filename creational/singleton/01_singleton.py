# Главное:
#    Singleton гарантирует, что у класса есть только один экземпляр, и предоставляет глобальную точку доступа к этому
#    экземпляру.
# Решает:
#     1. Гарантирует создание и наличие только одного экземпляра класса.
#     2. Предоставляет глобальную точку доступа к экземпляру класса.
# Применение:
#     Если в программе нужен единственный экземпляр класса, доступный из разных частей программы (например, доступ к
#     базе данных, логирование, кэш). Также если нужен больший контроль над глобальными переменными (никакой другой код
#     не может заменить экземпляр класса или создать новый)
# Реализация:
#     Общий способ - объявить конструктор приватным и создать статический метод, который инициализирует объект.


class Singleton(object):
    """ Позаоляет создать только один экземпляр класса Singleton непосредственно при его инициализации.
    Если экземпляр уже существует, то вернет его же.
    """
    _instance = None

    def __new__(cls):
        if not cls._instance:
            cls._instance = super().__new__(cls)
        return cls._instance

    # Остальная полезная функциональность
    def __init__(self):
        self._attrs = []

    def add_to_attrs(self, *args):
        self._attrs += list(args)

    def get_attrs(self):
        return self._attrs


if __name__ == '__main__':
    s1 = Singleton()
    s2 = Singleton()
    print(s1 == s2)

    s1.add_to_attrs(1, 2, 3)
    print(s2.get_attrs())
