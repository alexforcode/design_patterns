# Главное:
#    Паттерн Bridge разделяет один или несколько классов на две отдельные иерархии — абстракцию и реализацию, позволяя
#    изменять их независимо друг от друга.
# Применение:
#    1. Когда нужно разделить монолитный класс, который содержит несколько различных реализаций какой-то
#    функциональности (например, если класс может работать с разными системами баз данных).
#    2. Когда класс нужно расширять в двух независимых плоскостях.
#    3. Когда реализацию нужно изменять во время выполнения программы.
# Реализация:
#    0. Определить, существует ли в ваших классах два непересекающихся измерения. Это может быть
#    функциональность/платформа, предметная-область/инфраструктура, фронт-энд/бэк-энд или интерфейс/реализация.
#    1. Описать в базовом классе абстракции (управления) операции, которые будут нужны клиентам.
#    2. В общем интерфейсе реализации описать поведения, доступные на всех платформах и нужные для класса абстракции.
#    3. Для каждой платформы создать свой класс конкретной реализации. Все они должны следовать общему интерфейсу.
#    4. Определить в классе абстракции ссылку на объект реализации. Реализовать методы абстракции, делегируя основную
#    работу связанному объекту реализации.
#    5. Если есть несколько вариаций абстракции, создать для каждой из них свой подкласс.
#    6. Клиент должен подать объект реализации в конструктор абстракции, чтобы связать их воедино. После этого он может
#    свободно использовать объект абстракции, забыв о реализации.


from abc import ABCMeta, abstractmethod


class ITheme(metaclass=ABCMeta):
    """ Интерфейс реализации """
    @property
    @abstractmethod
    def color(self):
        pass


class DarkTheme(ITheme):
    """ Реализация темной темы страниц """
    @property
    def color(self):
        return 'Dark Theme'


class LightTheme(ITheme):
    """ Реализация светлой темы страниц """
    @property
    def color(self):
        return 'Light Theme'


class IWebPage(metaclass=ABCMeta):
    """ Базовый класс абстракции """
    def __init__(self, theme):
        self._theme = theme

    @abstractmethod
    def get_content(self):
        pass


class About(IWebPage):
    """ Расширение базового класса абстракции """
    def get_content(self):
        print(f'Page About with {self._theme.color}')


class Contacts(IWebPage):
    """ Расширение базового класса абстракции """
    def get_content(self):
        print(f'Page Contacts with {self._theme.color}')


if __name__ == '__main__':
    dark_theme = DarkTheme()
    light_theme = LightTheme()

    about_page = About(dark_theme)
    about_page.get_content()

    contacts_page = Contacts(light_theme)
    contacts_page.get_content()